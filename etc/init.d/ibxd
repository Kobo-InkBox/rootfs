#!/sbin/openrc-run

description="InkBox Daemon (ibxd) permits the execution of certain actions as an unpriviledged user and/or from a chroot environment."

depend() {
	keyword -prefix -lxc
}

bookconfig_mount() {
	mount --bind "${BOOK_CSUM_DIR}" /kobo/mnt/onboard/.adds/inkbox/.config
	# Exceptions
	mount --bind /opt/config/07-words_number /kobo/mnt/onboard/.adds/inkbox/.config/07-words_number
	mount --bind /opt/config/08-recent_books /kobo/mnt/onboard/.adds/inkbox/.config/08-recent_books
	mount --bind /opt/config/11-menubar /kobo/mnt/onboard/.adds/inkbox/.config/11-menubar
	mount --bind /opt/config/13-epub_page_size /kobo/mnt/onboard/.adds/inkbox/.config/13-epub_page_size
	mount --bind /opt/config/14-reader_scrollbar /kobo/mnt/onboard/.adds/inkbox/.config/14-reader_scrollbar
	echo "true" > /kobo/inkbox/bookConfigSetUp
}

start() {
	ebegin "Starting InkBox Daemon (ibxd)"

	mkfifo /run/ibxd 2>/dev/null
	umount /kobo/opt/ibxd -l -f 2>/dev/null
	umount /xorg/opt/ibxd -l -f 2>/dev/null

	touch /xorg/opt/ibxd 2>/dev/null
	mount --bind /run/ibxd /kobo/opt/ibxd 2>/dev/null
	mount --bind /run/ibxd /xorg/opt/ibxd 2>/dev/null

	while true
	do
		if read line < /run/ibxd; then
			if [[ "$line" == "sleep_toggle" ]]; then
				echo "state changed" > /tmp/power


			elif [[ "$line" == "reboot" ]]; then
				/sbin/reboot
			elif [[ "$line" == "reboot splash reset_kobox" ]]; then
				/sbin/reboot splash reset_kobox
			elif [[ "$line" == "reboot no_splash reset_kobox" ]]; then
				/sbin/reboot no_splash reset_kobox
			elif [[ "$line" == "reboot no_splash" ]]; then
				/sbin/reboot no_splash

			elif [[ "$line" == "poweroff" ]]; then
				/sbin/poweroff
			elif [[ "$line" == "poweroff no_splash" ]]; then
				/sbin/poweroff no_splash


			elif [[ "$line" == "qt_stop_gui" ]]; then
				rc-service inkbox_gui stop
			elif [[ "$line" == "qt_start_gui" ]]; then
				rc-service inkbox_gui start
			elif [[ "$line" == "x_start_gui" ]]; then
				rc-service xorg start
			elif [[ "$line" == "x_stop_gui" ]]; then
				rc-service xorg stop
			elif [[ "$line" == "app_start_vnc" ]]; then
				rc-service inkbox_gui stop
				/usr/local/bin/appvnc_start.sh &
			elif [[ "$line" == "list_wifi_networks" ]]; then
				/usr/local/bin/wifi/list_networks.sh
				cp /run/wifi_networks_list /kobo/run/wifi_networks_list
			elif [[ "$line" == "connect_to_wifi_network" ]]; then
				NET_ESSID=$(cat /kobo/run/wifi_network_essid)
				NET_PASSPHRASE=$(cat /kobo/run/wifi_network_passphrase)
				rm -f /kobo/run/wifi_network_essid
				rm -f /kobo/run/wifi_network_passphrase
				/usr/local/bin/wifi/connect_to_network.sh "${NET_ESSID}" "${NET_PASSPHRASE}"
				if [ ${?} != 0 ]; then
					echo "false" > /kobo/run/wifi_connected_successfully
				else
					echo "true" > /kobo/run/wifi_connected_successfully
				fi
			elif [[ "$line" == "toggle_wifi_off" ]]; then
				/usr/local/bin/wifi/toggle.sh off
			elif [[ "$line" == "toggle_wifi_on" ]]; then
				/usr/local/bin/wifi/toggle.sh on
			elif [[ "$line" == "ota_update_check" ]]; then
				/usr/local/bin/ota_update.sh
			elif [[ "$line" == "ota_update_download" ]]; then
				/usr/local/bin/ota_update.sh download
			elif [[ "$line" == "bookconfig_mount" ]]; then
				BOOK_FILE_RAW=$(cat /kobo/tmp/inkboxBookPath)
				BOOK_FILE="/kobo${BOOK_FILE_RAW}"
				BOOK_CSUM=$(sha256sum "${BOOK_FILE}" | awk '{ print $1 }')
				BOOK_CSUM_DIR="/data/onboard/.${BOOK_CSUM}"
				sync
				umount -l -f /kobo/mnt/onboard/.adds/inkbox/.config
				if [ -e "${BOOK_CSUM_DIR}" ]; then
					bookconfig_mount
				else
					mkdir -p "${BOOK_CSUM_DIR}"
					cp -r /opt/config/* "${BOOK_CSUM_DIR}"
					bookconfig_mount
				fi
			elif [[ "$line" == "bookconfig_unmount" ]]; then
				sync
				umount -l -f /kobo/mnt/onboard/.adds/inkbox/.config
				mount --bind /opt/config /kobo/mnt/onboard/.adds/inkbox/.config
			elif [[ "$line" == "onboard_mount" ]]; then
				rc-service onboard_mount start
			elif [[ "$line" == "onboard_unmount" ]]; then
				rc-service onboard_mount stop
			elif [[ "$line" == "kobox_extensions_storage_unmount" ]]; then
				sync
				umount -l -f /opt/X11/extensions-user
			elif [[ "$line" == "ibxd_stop" ]]; then
				break
			elif [[ "$line" == "usbnet_start" ]]; then
				rc-service usbnet start
			elif [[ "$line" == "usbnet_stop" ]]; then
				rc-service usbnet stop
			elif [[ "$line" == "update_inkbox_restart" ]]; then
				rc-service update_inkbox restart
			elif [[ "$line" == "inkbox_splash" ]]; then
				rc-service splash restart
			elif [[ "$line" == "netsurf_launch" ]]; then
				su -s /bin/sh -c "env DISPLAY=:0 chroot /xorg /bin/netsurf-gtk2"
				echo "stop" > /xorg/tmp/netsurf-fifo
			elif [[ "$line" == "encfs_restart" ]]; then
				rc-service encfs restart
			elif [[ "$line" == "encfs_stop" ]]; then
				rc-service encfs stop
			fi
		fi
	done &
	eend $?
}

stop() {
	echo "ibxd_stop" > /run/ibxd
}
