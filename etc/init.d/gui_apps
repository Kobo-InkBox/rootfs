#!/sbin/openrc-run

description="Sets InkBox GUI user apps up"

depend() {
	keyword -prefix -lxc
	after onboard_mount ipd
}

bind_mount_stylesheet() {
	if [ "${DEVICE}" == "n705" ] || [ "${DEVICE}" == "n905b" ] || [ "${DEVICE}" == "n905c" ] || [ "${DEVICE}" == "kt" ]; then
		mount --bind /usr/local/share/inkbox/stylesheets/eink-600x800.qss "${extension_mountpoint}/etc/eink.qss"
	elif [ "${DEVICE}" == "n613" ] || [ "${DEVICE}" == "n236" ] || [ "${DEVICE}" == "n306" ] || [ "${DEVICE}" == "emu" ]; then
		mount --bind /usr/local/share/inkbox/stylesheets/eink-768x1024.qss "${extension_mountpoint}/etc/eink.qss"
	elif [ "${DEVICE}" == "n437" ]; then
		mount --bind /usr/local/share/inkbox/stylesheets/eink-1072x1448.qss "${extension_mountpoint}/etc/eink.qss"
	elif [ "${DEVICE}" == "n873" ]; then
		mount --bind /usr/local/share/inkbox/stylesheets/eink-1264x1680.qss "${extension_mountpoint}/etc/eink.qss"
	else
		mount --bind /usr/local/share/inkbox/stylesheets/eink-600x800.qss "${extension_mountpoint}/etc/eink.qss"
	fi
}

start() {
	einfo "Setting up GUI user applications"
	[ ! -d "/data/onboard/.apps" ] && mkdir -p "/data/onboard/.apps"

	# If developer mode is enabled, bypass OpenSSL digital signature verification
	devmode="$(cat /opt/developer/key/valid-key 2>/dev/null)"
	if [ "${devmode}" == "true" ]; then
		echo "developer_fake-openssl_mount" > /run/initrd-fifo
		sleep 0.5
	fi

	# Iterate through '[onboard-storage]/.apps' and detect '.isa' packages
	for f in /data/onboard/.apps/*/*.isa; do
		if [ "${f}" != "/data/onboard/.apps/*/*.isa" ]; then
			if openssl dgst -sha256 -verify /opt/key/applications-public.pem -signature "${f}.dgst" "${f}" &>/dev/null; then
				# Basics
				extension_archive="${f}"
				extension_name="$(basename -s '.isa' ""${extension_archive}"")"
				extension_json_file_descriptor="/data/onboard/.apps/${extension_name}/app.json"
				extension_mountpoint="/data/onboard/.apps/${extension_name}/${extension_name}"
				extension_userdata_path="/data/onboard/.apps-data/${extension_name}"
				[ ! -d "${extension_mountpoint}" ] && mkdir -p "${extension_mountpoint}"
				squashfuse -o allow_other,nosuid "${extension_archive}" "${extension_mountpoint}" || die "Failed to mount GUI user application archive '${extension_archive}' at '${extension_mountpoint}'" 1

				#### chroot requirements
				## Required features
				required_features="$(jq -r '.[].RequiredFeatures |= join(" ")|.[].RequiredFeatures' ""${extension_json_file_descriptor}"")"
				for feature in ${required_features}; do
					if [ "${feature}" == "0" ]; then
						# Needs Wi-Fi connection
						reqf_wifi_connection=1
					elif [ "${feature}" == "1" ]; then
						# Needs rooted kernel
						reqf_root_kernel=1
					elif [ "${feature}" == "2" ]; then
						# Needs '/dev/{pts/,ptmx}' (e.g. for terminal emulators)
						reqf_pseudoterminal_support=1
					elif [ "${feature}" == "3" ]; then
						# Access to all input devices
						reqf_input_devices_support=1
					elif [ "${feature}" == "4" ]; then
						# Brightness control
						reqf_brightness_control=1
					elif [ "${feature}" == "5" ]; then
						# Rotation
						reqf_rotation_control=1
					elif [ "${feature}" == "6" ]; then
						# Debugfs
						reqf_debugfs=1
					fi
				done

				## Filesystems
				[ ! -d "/data/onboard/.apps-data" ] && mkdir -p "/data/onboard/.apps-data"
				[ ! -d "${extension_userdata_path}" ] && mkdir -p "${extension_userdata_path}"
				mount -t sysfs sysfs -o nosuid "${extension_mountpoint}/sys" || die "Failed to mount sys filesystem at '${extension_mountpoint}/sys'." 1
				mount -t tmpfs tmpfs -o size=64K,nosuid "${extension_mountpoint}/dev" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/dev'." 1
				mount -t tmpfs tmpfs -o size=64K,nosuid "${extension_mountpoint}/etc" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/etc'." 1
				mount -t tmpfs tmpfs -o size=32M,nosuid "${extension_mountpoint}/app-temp" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/app-temp'." 1
				mount -t tmpfs tmpfs -o size=64K,nosuid "${extension_mountpoint}/system-lib" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/system-lib'." 1
				mount -t tmpfs tmpfs -o size=64K,nosuid "${extension_mountpoint}/system-bin" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/system-bin'." 1
				mount -t tmpfs tmpfs -o size=64K,nosuid "${extension_mountpoint}/mnt" || die "Failed to mount temporary filesystem at '${extension_mountpoint}/mnt'." 1

				## lib
				(mkdir -p "${extension_mountpoint}/system-lib/lib" && mount --bind "/kobo/lib" "${extension_mountpoint}/system-lib/lib" && mkdir -p "${extension_mountpoint}/system-lib/qt" && mount --rbind "/kobo/mnt/onboard/.adds/qt-linux-5.15.2-kobo/" "${extension_mountpoint}/system-lib/qt" && chmod 555 "${extension_mountpoint}/system-lib" "${extension_mountpoint}/system-lib/lib") || die "Failed to bind-mount system libraries at '${extension_mountpoint}/system-lib'." 1
				## bin
				(touch "${extension_mountpoint}/system-bin/busybox" && mount --bind "/bin/busybox" "${extension_mountpoint}/system-bin/busybox" && chroot "${extension_mountpoint}" "/system-bin/busybox" "--install" "-s" "/system-bin") || die "Failed to bind-mount and/or set up temporary BusyBox binary at '${extension_mountpoint}/system-bin/busybox'." 1
				## etc
				(echo "user::1000:1000:user:/:/system-bin/sh" > "${extension_mountpoint}/etc/passwd" && echo "user:x:1000:" > "${extension_mountpoint}/etc/group" && touch "${extension_mountpoint}/etc/eink.qss" && bind_mount_stylesheet && touch "${extension_mountpoint}/etc/resolv.conf" && mount --bind "/etc/resolv.conf" "${extension_mountpoint}/etc/resolv.conf") || die "Failed to set up restricted authentication profile at '${extension_mountpoint}/etc'." 1
				# Wi-Fi connection (SSL certificates)
				if [ "${reqf_wifi_connection}" == 1 ]; then
					(mkdir -p "${extension_mountpoint}/etc/ssl" && mount --bind "/etc/ssl" "${extension_mountpoint}/etc/ssl" && mknod "${extension_mountpoint}/dev/urandom" c 1 9 && chown user:user "${extension_mountpoint}/dev/urandom") || die "Failed to bind-mount host's SSL certificates at '${extension_mountpoint}/etc/ssl/certs' and/or set up 'urandom' device node at '${extension_mountpoint}/dev/urandom'." 1
				fi
				(mount -o remount,ro "${extension_mountpoint}/etc") || die "Failed to remount '${extension_mountpoint}/etc' read-only." 1

				## dev
				# Framebuffer
				(mknod "${extension_mountpoint}/dev/fb0" c 29 0 && chown user:user "${extension_mountpoint}/dev/fb0") || die "Failed to set up '${extension_mountpoint}/dev/fb0' device node." 1
				# Input
				mkdir -p "${extension_mountpoint}/dev/input" || die "Failed to create '${extension_mountpoint}/dev/input' directory." 1
				(mknod "${extension_mountpoint}/dev/input/event0" c 13 64 && mknod "${extension_mountpoint}/dev/input/event1" c 13 65 && mknod "${extension_mountpoint}/dev/input/event2" c 13 66 &&
				if [ "${reqf_input_devices_support}" == 1 ]; then
					mknod "${extension_mountpoint}/dev/input/event3" c 13 67 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/event4" c 13 68 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/event5" c 13 69 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/event6" c 13 70 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/event7" c 13 71 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/event8" c 13 72 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/event9" c 13 73 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/event10" c 13 74 || die "Failed add input device" 1

					mknod "${extension_mountpoint}/dev/input/mice" c 13 63 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/mouse0" c 13 32 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/mouse1" c 13 33 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/mouse2" c 13 34 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/mouse3" c 13 35 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/mouse4" c 13 36 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/mouse5" c 13 37 || die "Failed add input device" 1
					mknod "${extension_mountpoint}/dev/input/mouse6" c 13 38 || die "Failed add input device" 1
				fi
				chown -R user:user "${extension_mountpoint}/dev/input/") || die "Failed to set up device input nodes at '${extension_mountpoint}/dev/input'." 1
				# ptmx/pts
				if [ "${reqf_pseudoterminal_support}" == 1 ]; then
					(mknod "${extension_mountpoint}/dev/tty" c 5 0 && chown user:user "${extension_mountpoint}/dev/tty" && mknod "${extension_mountpoint}/dev/ptmx" c 5 2 && chown user:user "${extension_mountpoint}/dev/ptmx" && (if [ ! -f "${extension_mountpoint}/dev/urandom" ]; then mknod "${extension_mountpoint}/dev/urandom" c 1 9 && chown user:user "${extension_mountpoint}/dev/urandom"; else return 0; fi) && mkdir -p "${extension_mountpoint}/dev/pts" && mount -t devpts devpts -o nosuid,noexec "${extension_mountpoint}/dev/pts") || die "Failed to set up pseudoterminal support at '${extension_mountpoint}/dev'." 1
				fi
				# Brightness
				if [ "${reqf_brightness_control}" == 1 ]; then
					# ntx_io will not be used because it has more access than brightness. Let's go with native interfaces
					# TODO: add other devices
					if [ "${DEVICE}" == "n236" ] || [ "${DEVICE}" == "n437" ]; then
						chmod -R 706 "${extension_mountpoint}/sys/class/backlight/mxc_msp430_fl.0/" || die "Failed to chmod 706 '${extension_mountpoint}/sys/class/backlight/mxc_msp430_fl.0/'." 1
					else
						chmod -R 706 "${extension_mountpoint}/sys/class/backlight/mxc_msp430.0/" || die "Failed to chmod 706 '${extension_mountpoint}/sys/class/backlight/mxc_msp430.0/'." 1
					fi
				fi
				# Rotation
				if [ "${reqf_rotation_control}" == 1 ]; then
					chmod 706 "${extension_mountpoint}/sys/class/graphics/fb0/rotate" || die "Failed to chmod 706 '${extension_mountpoint}/sys/class/graphics/fb0/rotate'." 1
				fi
				# Debugfs
				if [ "${reqf_debugfs}" == 1 ]; then
					mount -t debugfs none "${extension_mountpoint}/sys/kernel/debug" || die "Failed to mount debug filesystem at '${extension_mountpoint}/sys/kernel/debug'." 1
					chmod -R 706 "${extension_mountpoint}/sys/kernel/debug" || die "Failed to chmod 706 '${extension_mountpoint}/sys/class/graphics/fb0/rotate'." 1
				fi
				# Power daemon
				(mkdir -p "${extension_mountpoint}/dev/ipd" && touch "${extension_mountpoint}/dev/ipd/fifo" && mount --bind "/run/ipd/fifo" "${extension_mountpoint}/dev/ipd/fifo") || die "Failed to bind-mount InkBox Power Daemon (ipd) named pipe" 1
				mount -o remount,ro "${extension_mountpoint}/dev" || die "Failed to remount '${extension_mountpoint}/dev' read-only." 1
				## mnt
				(mkdir -p "${extension_mountpoint}/mnt/onboard/.kobo" && echo "$(cat /opt/inkbox_device | tr [:lower:] [:upper:])" > "${extension_mountpoint}/mnt/onboard/.kobo/version" && mount -o remount,ro "${extension_mountpoint}/mnt") || die "Failed to set up fake onboard filesystem for FBInk." 1
				## User data
				(mount --bind "${extension_userdata_path}" "${extension_mountpoint}/app-data" && chown user:user "${extension_mountpoint}/app-data") || die "Failed to bind-mount user data directory '${extension_userdata_path}' at '${extension_mountpoint}/app-data'." 1
				einfo "Successfully set up application '${extension_name}'"
			else
				ewarn "GUI user application '${extension_archive}''s digital signature is invalid!"
			fi
		fi
	done

	if [ "${devmode}" == "true" ]; then
		echo "developer_fake-openssl_unmount" > /run/initrd-fifo
		sleep 0.5
	fi

	sleep 0.5
	mount --rbind /data/onboard /kobo/mnt/onboard/onboard
	eend $?
}

die() {
	if [ -z "${1}" ]; then
		error_message="Unknown error"
	else
		error_message="${1}"
	fi
	if [ -z "${2}" ]; then
		error_code=1
	else
		error_code=${2}
	fi

	devmode="$(cat /opt/developer/key/valid-key 2>/dev/null)"
	if [ "${devmode}" == "true" ]; then
		echo "developer_fake-openssl_unmount" > /run/initrd-fifo
	fi

	eerror "${error_message}"
	eend ${error_code}
}

stop() {
	sync
	umount -l -f /kobo/mnt/onboard/onboard/.apps/*/* 2>/dev/null
	umount -l -f /data/onboard/.apps/*/* 2>/dev/null
	return 0
}
