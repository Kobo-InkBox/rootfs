#!/sbin/openrc-run

description="Sets up encrypted storage."

depend() {
	keyword -prefix -lxc
}

error_exit() {
	echo "Error: ${1}. Exiting."
	[ -z "${2}" ] && exit 1
	exit "${2}"
}

calculate() {
	awk "BEGIN { print "$*" }";
}

start() {
	BOOTSTRAP_CREATE=$(cat /run/encrypted_storage_create 2>/dev/null)
	if ! echo "${BOOTSTRAP_CREATE}" | grep -q "true"; then
		ENCRYPTED_STORAGE_CONFIG=$(cat /opt/config/18-encrypted_storage/status 2>/dev/null)
		STORAGE_LIST=$(cat /opt/config/18-encrypted_storage/storage_list 2>/dev/null)
		if ! echo "${ENCRYPTED_STORAGE_CONFIG}" | grep -q "true"; then echo "Storage encryption disabled. Exiting."; exit 0; fi
		ENCRYPTED_STORAGE_ARCHIVE=$(cat /run/encrypted_storage_archive 2>/dev/null)
		ENCRYPTED_STORAGE_MOUNTPOINT=$(cat /run/encrypted_storage_mountpoint 2>/dev/null)
		ENCRYPTED_STORAGE_PASSPHRASE=$(cat /run/encrypted_storage_passphrase 2>/dev/null)
		if [ ! -z "${ENCRYPTED_STORAGE_ARCHIVE}" ] && [ ! -z "${ENCRYPTED_STORAGE_MOUNTPOINT}" ] && [ ! -z "${ENCRYPTED_STORAGE_PASSPHRASE}" ]; then
			# Encrypted storage archive is a SquashFS file, mounting it
			mkdir -p /run/encfs
			mkdir -p /run/encfsd/encrypted
			squashfuse "${ENCRYPTED_STORAGE_ARCHIVE}" /run/encfs/encrypted
			if ! echo "${STORAGE_LIST}" | grep -q "${ENCRYPTED_STORAGE_MOUNTPOINT}"; then
				error_exit "Mountpoint is not in trusted storage list" 2
			else
				# Writing script which returns passphrase to encfs program
				printf "#!/bin/sh\nprintf '${ENCRYPTED_STORAGE_PASSPHRASE}\p'\nreturn 0\n" | sed 's/\\p/\\n/g' > /run/encfs/encfs_passphrase_return.sh && chmod +x /run/encfs/encfs_passphrase_return.sh
				encfs --extpass=/run/encfs/encfs_passphrase_return.sh /run/encfsd/encrypted "${ENCRYPTED_STORAGE_MOUNTPOINT}"
				[ ${?} != 0 ] && error_exit "Encrypted storage setup" 1
			fi
			exit 0
		else
			error_exit "Arguments parsing" 2
		fi
	else
		BOOTSTRAP_FILES_LOCATION=$(cat /run/encrypted_storage_bootstrap_files_location 2>/dev/null)
		BOOTSTRAP_PASSPHRASE=$(cat /run/encrypted_storage_bootstrap_passphrase 2>/dev/null)
		MEMTOTAL=$(grep "MemTotal" /proc/meminfo | awk '{ print $2 }')
		[ ! -e "${BOOTSTRAP_FILES_LOCATION}" ] && error_exit "Bootstrap files location not found" 127
		BOOTSTRAP_FILES_LOCATION_FOLDER_SIZE=$(du -s "${BOOTSTRAP_FILES_LOCATION}" | awk '{ print $1 }')
		if [ -z "${BOOTSTRAP_FILES_LOCATION}" ] || [ -z "${BOOTSTRAP_PASSPHRASE}" ]; then
			error_exit "Arguments parsing" 127
		fi
		AVAILABLE_RAM=$(calculate ${MEMTOTAL}/4)
		BOOTSTRAP_FILES_LOCATION_FOLDER_SIZE=$(calculate ${BOOTSTRAP_FILES_LOCATION_FOLDER_SIZE}*2)

		if [ ${BOOTSTRAP_FILES_LOCATION_FOLDER_SIZE} -gt ${AVAILABLE_RAM} ]; then
			BOOTSTRAP_ROOT_ENCRYPTED="/data/storage/encfsd/bootstrap_root_encrypted"
			BOOTSTRAP_ROOT_VISIBLE="/data/storage/encfsd/bootstrap_root_visible"
		else
			BOOTSTRAP_ROOT_ENCRYPTED="/run/encfsd/bootstrap_root_encrypted"
			BOOTSTRAP_ROOT_VISIBLE="/run/encfsd/bootstrap_root_visible"
		fi
		mkdir -p /run/encfs
		mkdir -p "${BOOTSTRAP_ROOT_ENCRYPTED}"
		mkdir -p "${BOOTSTRAP_ROOT_VISIBLE}"

		# Writing script which returns passphrase to encfs program
		printf "#!/bin/sh\nprintf '${BOOTSTRAP_PASSPHRASE}\p${BOOTSTRAP_PASSPHRASE}\p'\nreturn 0\n" | sed 's/\\p/\\n/g' > /run/encfs/encfs_bootstrap_return.sh && chmod +x /run/encfs/encfs_bootstrap_return.sh
		[ ${?} != 0 ] && error_exit "Encrypted storage setup" 2
		encfs --paranoia --extpass=/run/encfs/encfs_bootstrap_return.sh "${BOOTSTRAP_ROOT_ENCRYPTED}" "${BOOTSTRAP_ROOT_VISIBLE}"
	fi
}
